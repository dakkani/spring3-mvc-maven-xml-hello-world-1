node('') {
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "http://18.206.151.37:8081/"
        NEXUS_REPOSITORY = "simple-customer-app"
        NEXUS_CREDENTIAL_ID = "nexus-id"
    }

    stage('Checkout Code') {
        echo 'Checking out source code...'
        git 'https://github.com/dakkani/spring3-mvc-maven-xml-hello-world-1.git'
    }

    stage('Build and Package') {
        echo 'Building and packaging the application...'
        sh 'mvn -Dmaven.test.failure.ignore=true clean package'
    }

    stage('Publish to Nexus') {
        script {
            echo 'Publishing artifact to Nexus...'
            def pom = readMavenPom file: 'pom.xml'
            // Use values from your pom.xml
            def artifactName = "${pom.artifactId}-${pom.version}.${pom.packaging}"
            def artifactPath = "target/${artifactName}"
            def sourcesArtifactPath = "target/${pom.artifactId}-${pom.version}-sources.jar"

            if (fileExists(artifactPath)) {
                echo "Found artifact: ${artifactPath}"
                def artifactsToUpload = [
                    [
                        artifactId: pom.artifactId,
                        classifier: '',
                        file: artifactPath,
                        type: pom.packaging
                    ],
                    [
                        artifactId: pom.artifactId,
                        classifier: '',
                        file: 'pom.xml',
                        type: 'pom'
                    ]
                ]

                // Conditionally add the sources artifact if it exists
                if (fileExists(sourcesArtifactPath)) {
                    artifactsToUpload.add([
                        artifactId: pom.artifactId,
                        classifier: 'sources',
                        file: sourcesArtifactPath,
                        type: 'jar'
                    ])
                } else {
                    echo "Sources JAR not found at: ${sourcesArtifactPath}. Skipping upload."
                }

                nexusArtifactUploader(
                    nexusVersion: env.NEXUS_VERSION,  // Access environment variable with env.
                    protocol: env.NEXUS_PROTOCOL,     // Access environment variable with env.
                    nexusUrl: env.NEXUS_URL,          // Access environment variable with env.
                    groupId: pom.groupId,
                    version: "${pom.version}",
                    repository: env.NEXUS_REPOSITORY, // Access environment variable with env.
                    credentialsId: env.NEXUS_CREDENTIAL_ID, // Access environment variable with env.
                    artifacts: artifactsToUpload
                )
                echo "Successfully published ${artifactName} to Nexus: ${env.NEXUS_URL}${env.NEXUS_REPOSITORY}/${pom.groupId.replace('.', '/')}/${pom.artifactId}/${pom.version}/${artifactName}"
            } else {
                error "Artifact not found at: ${artifactPath}"
            }
        }
    }
}
