pipeline {
    agent any
 
    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'origin/master', name: 'BRANCH', type: 'PT_BRANCH'
        string(name: 'GIT_URL', defaultValue: 'https://github.com/betawins/parametirize-job.git', description: 'Git repository URL')
        string(name: 'NEXUS_URL', defaultValue: '13.233.66.167:8081/', description: 'Nexus server URL with port')
        string(name: 'NEXUS_REPOSITORY', defaultValue: 'ncodeit-helloworld', description: 'Nexus repository name')
        
        booleanParam(defaultValue: false, description: 'Build with Maven', name: 'mvn_build')
        booleanParam(defaultValue: false, description: 'Publish artifacts to Nexus', name: 'publish_to_nexus')
    }
    
    tools {
        maven "Maven"
    }
    
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_CREDENTIAL_ID = "nexus_credentials"
    }
    
    stages {
        stage("clone code") {
            steps {
                script {
                    git branch: "${params.BRANCH}", url: "${params.GIT_URL}"
                } 
            }
        }
        
        stage("mvn build") {
            steps {
                script {
                    if (params.mvn_build) {
                        sh '/usr/share/maven/bin/mvn -Dmaven.test.failure.ignore clean package'
                    } else {
                        echo "Skipping Maven build"
                    }
                }
            }
        }
        
        stage("publish to nexus") {
            steps {
                script {
                    if (params.publish_to_nexus) {
                        pom = readMavenPom file: "pom.xml";
                        filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                        echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                        artifactPath = filesByGlob[0].path;
                        artifactExists = fileExists artifactPath;
                        
                        if(artifactExists) {
                            echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                            nexusArtifactUploader(
                                nexusVersion: NEXUS_VERSION,
                                protocol: NEXUS_PROTOCOL,
                                nexusUrl: params.NEXUS_URL,
                                groupId: pom.groupId,
                                version: '${BUILD_NUMBER}',
                                repository: params.NEXUS_REPOSITORY,
                                credentialsId: NEXUS_CREDENTIAL_ID,
                                artifacts: [
                                    [artifactId: pom.artifactId,
                                    classifier: '',
                                    file: artifactPath,
                                    type: pom.packaging],
                                    [artifactId: pom.artifactId,
                                    classifier: '',
                                    file: "pom.xml",
                                    type: "pom"]
                                ]
                            );
                        } else {
                            error "*** File: ${artifactPath}, could not be found";
                        }
                    } else {
                        echo "Skipping Nexus publish"
                    }
                }
            }
        }
    }
}
